//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lit_Unity_LuaTimerEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lit.Unity.LuaTimerEvent), typeof(Lit.Unity.TimerEvent));
		L.RegFunction("CheckValid", CheckValid);
		L.RegFunction("DoHandler", DoHandler);
		L.RegFunction("New", _CreateLit_Unity_LuaTimerEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLit_Unity_LuaTimerEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				Lit.Unity.LitLua arg0 = (Lit.Unity.LitLua)ToLua.CheckUnityObject(L, 1, typeof(Lit.Unity.LitLua));
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				Lit.Unity.LuaTimerEvent obj = new Lit.Unity.LuaTimerEvent(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Lit.Unity.LuaTimerEvent.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckValid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lit.Unity.LuaTimerEvent obj = (Lit.Unity.LuaTimerEvent)ToLua.CheckObject(L, 1, typeof(Lit.Unity.LuaTimerEvent));
			bool o = obj.CheckValid();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lit.Unity.LuaTimerEvent obj = (Lit.Unity.LuaTimerEvent)ToLua.CheckObject(L, 1, typeof(Lit.Unity.LuaTimerEvent));
			obj.DoHandler();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

